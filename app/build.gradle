/*
 *  Copyright 2022 CNM Ingenuity, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
plugins {
    id 'com.android.application'
    id 'androidx.navigation.safeargs'
    id 'kotlin-android'
}

android {

    //noinspection GroovyAssignabilityCheck
    compileSdkVersion 31

    //noinspection GroovyAssignabilityCheck
    defaultConfig {

        applicationId "edu.cnm.deepdive.crapssimulator"
        minSdkVersion 26
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resValue "string", "app_name", appName

    }

    //noinspection GroovyAssignabilityCheck
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //noinspection GroovyAssignabilityCheck
    buildFeatures {
        //noinspection GroovyAssignabilityCheck
        viewBinding true
    }

}

dependencies {

    //Core Kotlin libraries
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"


    // Basic Android support libraries
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    // Material Design components
    implementation 'com.google.android.material:material:1.4.0'

    // Preferences/settings library
    implementation 'androidx.preference:preference:1.1.1'

    // Navigation libraries
    implementation 'androidx.fragment:fragment:1.4.0'
    implementation "androidx.navigation:navigation-fragment:$navigationVersion"
    implementation "androidx.navigation:navigation-ui:$navigationVersion"

    // Lifecycle (LiveData and ViewModel) libraries
    def lifecycleVersion = '2.4.0'
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"

    // ReactiveX library
    implementation 'io.reactivex.rxjava3:rxjava:3.1.3'

    // Apache Commons libraries
    implementation 'org.apache.commons:commons-rng-simple:1.4'
    implementation 'commons-io:commons-io:2.11.0'

    // Markdown rendering library
    implementation "io.noties.markwon:core:4.6.2"

    // Test libraries
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

}

task generateApiDoc() {
    group "reporting"
    description "Generates all Javadoc."
}

android.applicationVariants.all { variant ->

    def task = project.tasks.create("generate${variant.name.capitalize()}Javadoc", Javadoc) {

        title "$appName ${project.android.defaultConfig.versionName}"
        group "ApiDoc"
        description "Generates Javadoc for $variant.name."

        source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i }

        doFirst {
            classpath = project.files(
                    file(projectDir)
                            .toPath()
                            .resolve("build/intermediates/javac/${variant.name}/classes"),
                    variant.javaCompileProvider.get().classpath.files,
                    project.android.getBootClasspath()
            )
        }

        exclude '**/R'
        exclude '**/R.**'
        exclude '**/R\$**'
        exclude '**/BuildConfig*'

        destinationDir = file("$projectDir/../docs/api")

        //noinspection GroovyAssignabilityCheck
        options {
            windowTitle = "$appName ${project.android.defaultConfig.versionName}"
            memberLevel = JavadocMemberLevel.PROTECTED
            linkSource = false
            author = false
            links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
            linksOffline 'https://developer.android.com/reference', "$projectDir/.."
            links 'https://reactivex.io/RxJava/3.x/javadoc/'
        }

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        failOnError true

    }

    task.dependsOn "assemble${variant.name.capitalize()}"
    generateApiDoc.dependsOn task

}
